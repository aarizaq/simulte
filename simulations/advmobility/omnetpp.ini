[General]
image-path=../../images
output-scalar-file-append = false
sim-time-limit=30s
seed-set = ${repetition}
**.vector-recording = false


[Config Stationary]
network = lte.simulations.networks.SingleCell
**.numUe = 2

*.configurator.config = xmldoc("demo.xml")

################ Standard mobility parameters #####################
**.constraintAreaMinZ = 0m
**.constraintAreaMaxZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMinX = 0m
**.constraintAreaMaxY = 1000m
**.constraintAreaMinY = 0m

# one application for each user
*.ue[*].numApps = 1

# the base scenario has only one TCP connection from ue[0] to ue[1] (no app on server)
# *.server.numApps = 0

# connect each UE to the eNB
**.ue[*].macCellId = 1
**.ue[*].masterId = 1

# positioning and mobility
#*.ue[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
*.ue[*].mobility.initFromDisplayString = false
*.ue[*].mobility.initialX = uniform(0m,300m)
*.ue[*].mobility.initialY = uniform(0m,300m)
*.ue[*].mobility.initialZ = 0m
*.ue[*].mobility.typename = "StationaryMobility"

#============= Application Setup =============
# Traffic between UEs (ue[0] --> ue[1])
# Transmitter
*.ue[0].app[*].typename = "TcpSessionApp"
*.ue[0].app[*].localPort = 1000
*.ue[0].app[*].sendBytes = 1GiB
*.ue[0].app[0].tOpen = uniform(0.010s,0.1s) 
*.ue[0].app[0].tSend = uniform(0.15s,0.5s) 
*.ue[0].app[0].connectAddress = "ue[1]" 
*.ue[0].app[0].localAddress = "ue[0]" 

# Receiver
*.ue[1].app[*].typename = "TcpSinkApp"
*.ue[1].app[*].localPort = 1000

**.app[*].tClose = -1s


# Orbit: ue[0] uses a random waypoint mobility while ue[1] circles around ue[0]
[Config Orbit]
extends = Stationary

# randomly moving user:
*.ue[0].mobility.typename = "RandomWaypointMobility"
*.ue[0].mobility.speed = 20mps

# the orbiting user:
*.ue[1].mobility.typename = "SuperpositioningMobility"
*.ue[1].mobility.numElements = 2
*.ue[1].mobility.element[0].typename = "AttachedMobility"
*.ue[1].mobility.element[0].mobilityModule = "^.^.^.ue[0].mobility"
*.ue[1].mobility.element[1].typename = "CircleMobility"
*.ue[1].mobility.element[1].cx = 0m
*.ue[1].mobility.element[1].cy = 0m
*.ue[1].mobility.element[1].r = 150m
*.ue[1].mobility.element[1].constraintAreaMinX = -150m
*.ue[1].mobility.element[1].constraintAreaMaxX = 150m
*.ue[1].mobility.element[1].constraintAreaMinY = -150m
*.ue[1].mobility.element[1].constraintAreaMaxY = 150m
*.ue[1].mobility.element[1].speed = -50mps

*.ue[1].mobility.element[1].faceForward = true
*.ue[1].mobility.element[0].faceForward = false

**.mobility.displayStringTextFormat = "p: %p\nv: %v\nP: %P"


# Example for using turtle in combination with superpositioning:
# ue[0] is stationary, 
# ue[1] travels a path specified by a turtle xml description which
# is superpositioned by a random markov movement (see INET mobility tutorial)
[Config Turtle]
extends = Stationary

# ue[0] is stationary as within the base scenario - we only need to
# specify the behaviour of ue[1] here
*.ue[1].mobility.typename = "SuperpositioningMobility"
*.ue[1].mobility.numElements = 2

*.ue[1].mobility.element[0].typename = "TurtleMobility"
*.ue[1].mobility.element[0].turtleScript = xmldoc("config_turtle.xml")

*.ue[1].mobility.element[1].typename = "GaussMarkovMobility"
*.ue[1].mobility.element[1].speed = 10mps

*.ue[1].mobility.element[1].margin = 0m
*.ue[1].mobility.element[1].speedStdDev = 0.5mps
*.ue[1].mobility.element[1].angleStdDev = 0.5deg
*.ue[1].mobility.element[1].alpha = 0

*.ue[1].mobility.element[1].constraintAreaMinX = 0m
*.ue[1].mobility.element[1].constraintAreaMaxX = 25m
*.ue[1].mobility.element[1].constraintAreaMinY = 0m
*.ue[1].mobility.element[1].constraintAreaMaxY = 25m
*.ue[1].mobility.element[1].constraintAreaMinZ = 0m
*.ue[1].mobility.element[1].constraintAreaMaxZ = 0m

